"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { ArrowLeft, Mic, MicOff, Volume2, Send, User, Bot } from "lucide-react"

export default function ConversationPage({ params }: { params: { id: string } }) {
    const [showSetup, setShowSetup] = useState(true)
    const [prompt, setPrompt] = useState("")
    const [isRecording, setIsRecording] = useState(false)
    const [conversation, setConversation] = useState<Array<{ role: string; message: string; timestamp: string }>>([])
    const [timeLeft, setTimeLeft] = useState(180)
    const [isActive, setIsActive] = useState(false)
    const [currentMessage, setCurrentMessage] = useState("")
    const [isListening, setIsListening] = useState(false)

    const conversationData = {
        "1": {
            title: "Job Interview Practice",
            description: "Luy·ªán t·∫≠p ph·ªèng v·∫•n xin vi·ªác v·ªõi AI",
            image: "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/image-3H15NOYIwhyEpWzwWxdy2ztFp2sOcW.png",
            defaultPrompt:
                "T√¥i l√† l·∫≠p tr√¨nh vi√™n, t√¥i mu·ªën th·ª±c hi·ªán 1 cu·ªôc ph·ªèng v·∫•n li√™n quan t·ªõi Backend developer ng√¥n ng·ªØ C#, .NET Framework. H√£y ƒë√≥ng vai nh√† tuy·ªÉn d·ª•ng v√† ph·ªèng v·∫•n t√¥i.",
        },
    }

    const currentTopic = conversationData[params.id as keyof typeof conversationData]

    useEffect(() => {
        let interval: NodeJS.Timeout | null = null
        if (isActive && timeLeft > 0) {
            interval = setInterval(() => {
                setTimeLeft((time) => time - 1)
            }, 1000)
        } else if (timeLeft === 0) {
            setIsActive(false)
        }
        return () => {
            if (interval) clearInterval(interval)
        }
    }, [isActive, timeLeft])

    const formatTime = (seconds: number) => {
        const mins = Math.floor(seconds / 60)
        const secs = seconds % 60
        return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`
    }

    const startConversation = () => {
        if (!prompt.trim()) return

        setShowSetup(false)
        setIsActive(true)

        const initialMessage = {
            role: "ai",
            message:
                "Xin ch√†o! T√¥i l√† nh√† tuy·ªÉn d·ª•ng h√¥m nay. Tr∆∞·ªõc ti√™n, b·∫°n c√≥ th·ªÉ gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n v√† kinh nghi·ªám l√†m vi·ªác v·ªõi C# v√† .NET Framework kh√¥ng?",
            timestamp: new Date().toLocaleTimeString(),
        }

        setConversation([initialMessage])
    }

    const handleVoiceInput = () => {
        if (!isRecording) {
            setIsRecording(true)
            setIsListening(true)
            if ("webkitSpeechRecognition" in window) {
                const recognition = new (window as any).webkitSpeechRecognition()
                recognition.continuous = false
                recognition.interimResults = false
                recognition.lang = "en-US"

                recognition.onresult = (event: any) => {
                    const transcript = event.results[0][0].transcript
                    setCurrentMessage(transcript)
                    setIsRecording(false)
                    setIsListening(false)
                }

                recognition.onerror = () => {
                    setIsRecording(false)
                    setIsListening(false)
                }

                recognition.start()
            }
        } else {
            setIsRecording(false)
            setIsListening(false)
        }
    }

    const sendMessage = () => {
        if (!currentMessage.trim()) return

        const userMessage = {
            role: "user",
            message: currentMessage,
            timestamp: new Date().toLocaleTimeString(),
        }

        setConversation((prev) => [...prev, userMessage])
        setCurrentMessage("")

        setTimeout(() => {
            const aiResponses = [
                "R·∫•t t·ªët! B·∫°n c√≥ th·ªÉ chia s·∫ª v·ªÅ m·ªôt d·ª± √°n c·ª• th·ªÉ m√† b·∫°n ƒë√£ l√†m v·ªõi .NET Framework kh√¥ng?",
                "Th√∫ v·ªã! B·∫°n ƒë√£ g·∫∑p nh·ªØng th√°ch th·ª©c g√¨ khi l√†m vi·ªác v·ªõi C# v√† gi·∫£i quy·∫øt nh∆∞ th·∫ø n√†o?",
                "Tuy·ªát v·ªùi! B·∫°n c√≥ kinh nghi·ªám v·ªõi Entity Framework hay c√°c ORM kh√°c kh√¥ng?",
                "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª. Cu·ªëi c√πng, b·∫°n c√≥ c√¢u h·ªèi n√†o v·ªÅ c√¥ng ty hay v·ªã tr√≠ n√†y kh√¥ng?",
            ]

            const randomResponse = aiResponses[Math.floor(Math.random() * aiResponses.length)]

            const aiMessage = {
                role: "ai",
                message: randomResponse,
                timestamp: new Date().toLocaleTimeString(),
            }

            setConversation((prev) => [...prev, aiMessage])
        }, 1500)
    }

    if (showSetup) {
        return (
            <div className="min-h-screen flex items-center justify-center p-4 bg-[#F5F3EA]">
                <Card className="w-full max-w-2xl border-0 bg-white">
                    <CardContent className="p-8">
                        <div className="text-center mb-8">
                            <img
                                src={currentTopic?.image || "/placeholder.svg"}
                                alt={currentTopic?.title}
                                className="w-64 h-48 mx-auto rounded-lg mb-6 object-cover"
                            />
                            <h1 className="text-2xl font-bold mb-2 text-slate-800">G·∫∑p ng∆∞·ªùi b·∫°n m·ªõi trong bu·ªïi ti·ªác</h1>
                            <h2 className="text-xl mb-4 text-slate-700">Tr√≤ chuy·ªán v·ªõi AI - L√†m Nhi·ªám V·ª•</h2>
                            <p className="text-slate-600 mb-6">
                                Robert l√† ng∆∞·ªùi b·∫°n m·ªõi g·∫∑p trong m·ªôt bu·ªïi ti·ªác. B·∫°n mu·ªën l√†m quen v√† gi·ªõi thi·ªáu b·∫£n th√¢n. B·∫°n v√† Robert
                                ƒë·ª´ng n√≥i chuy·ªán b√™n c·∫°nh b√†n ti·ªác nh·ªè. üç∏
                            </p>
                        </div>

                        <div className="mb-6">
                            <h3 className="text-lg font-semibold mb-4 text-slate-800">Nhi·ªám v·ª•</h3>
                            <div className="space-y-3">
                                <div className="flex items-center space-x-3 p-3 rounded-lg bg-gray-50">
                                    <div className="w-6 h-6 rounded-full flex items-center justify-center bg-lime-500">
                                        <span className="text-white text-sm">üéØ</span>
                                    </div>
                                    <span className="text-slate-700">H√£y chia s·∫ª t√™n c·ªßa b·∫°n.</span>
                                </div>
                                <div className="flex items-center space-x-3 p-3 rounded-lg bg-gray-50">
                                    <div className="w-6 h-6 rounded-full flex items-center justify-center bg-lime-500">
                                        <span className="text-white text-sm">üéØ</span>
                                    </div>
                                    <span className="text-slate-700">Cho ng∆∞·ªùi b·∫°n m·ªõi bi·∫øt b·∫°n ƒë·∫øn t·ª´ ƒë√¢u.</span>
                                </div>
                                <div className="flex items-center space-x-3 p-3 rounded-lg bg-gray-50">
                                    <div className="w-6 h-6 rounded-full flex items-center justify-center bg-lime-500">
                                        <span className="text-white text-sm">üéØ</span>
                                    </div>
                                    <span className="text-slate-700">Chia s·∫ª ngh·ªÅ nghi·ªáp c·ªßa b·∫°n.</span>
                                </div>
                            </div>
                        </div>

                        <div className="flex space-x-4">
                            <Button
                                className="flex-1 text-white border-0 hover:opacity-90 text-lg py-3 cursor-pointer bg-lime-500"
                                onClick={() => {
                                    setPrompt(currentTopic?.defaultPrompt || "")
                                    startConversation()
                                }}
                            >
                                B·∫Øt ƒë·∫ßu b√†i h·ªçc
                            </Button>
                            <Button variant="outline" className="flex-1 text-lg py-3 border-slate-200 text-slate-700 hover:bg-lime-50 cursor-pointer">
                                L·ªãch s·ª≠ tr√≤ chuy·ªán
                            </Button>
                        </div>
                    </CardContent>
                </Card>
            </div>
        )
    }

    return (
        <div className="min-h-screen text-slate-800 bg-[#F5F3EA]">
            <div className="px-6 py-4 bg-[#F5F3EA]">
                <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                        <Link href="/learning/speaking">
                            <Button variant="outline" size="sm" className="text-slate-700 hover:text-slate-800 border-slate-200 hover:bg-lime-50 cursor-pointer">
                                <ArrowLeft className="h-4 w-4 mr-2" />
                                Quay l·∫°i
                            </Button>
                        </Link>
                        <div>
                            <h1 className="text-xl font-bold text-slate-800">L√†m nhi·ªám v·ª• c√πng AI</h1>
                            <div className="flex items-center space-x-2 text-sm text-slate-600">
                                <span>‚úÖ 0/3</span>
                            </div>
                        </div>
                    </div>

                    <div className="flex items-center space-x-4">
                        <div className="px-3 py-1 rounded-full font-mono text-white bg-lime-500">‚è±Ô∏è {formatTime(timeLeft)}</div>
                    </div>
                </div>
            </div>

            <div className="flex h-[calc(100vh-80px)]">
                <div className="flex-1 flex flex-col">
                    <div className="flex-1 overflow-y-auto p-6 space-y-4">
                        <div className="text-center mb-6">
                            <h2 className="text-lg font-semibold mb-2 text-slate-800">T√¨nh hu·ªëng</h2>
                            <p className="text-slate-700">
                                Robert l√† ng∆∞·ªùi b·∫°n m·ªõi g·∫∑p trong m·ªôt bu·ªïi ti·ªác. B·∫°n mu·ªën l√†m quen v√† gi·ªõi thi·ªáu b·∫£n th√¢n. B·∫°n v√† Robert
                                ƒë·ª´ng n√≥i chuy·ªán b√™n c·∫°nh b√†n ti·ªác nh·ªè. üç∏
                            </p>
                        </div>

                        <div className="space-y-4">
                            {conversation.map((msg, index) => (
                                <div key={index} className={`flex ${msg.role === "user" ? "justify-end" : "justify-start"}`}>
                                    <div
                                        className={`flex items-start space-x-3 max-w-xs ${msg.role === "user" ? "flex-row-reverse space-x-reverse" : ""}`}
                                    >
                                        <div
                                            className={`w-10 h-10 rounded-full flex items-center justify-center ${msg.role === "user" ? "text-white bg-lime-500" : "bg-slate-400"}`}
                                        >
                                            {msg.role === "user" ? <User className="h-5 w-5" /> : <Bot className="h-5 w-5" />}
                                        </div>
                                        <div
                                            className={`p-3 rounded-lg ${msg.role === "user" ? "text-white bg-lime-500" : "bg-white text-slate-800 border border-slate-200"}`}
                                        >
                                            <p>{msg.message}</p>
                                            <p className="text-xs text-slate-500 mt-1">{msg.timestamp}</p>
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>

                        {conversation.length > 0 && (
                            <div className="flex justify-center">
                                <div className="rounded-lg p-4 flex items-center space-x-3 bg-white border border-slate-200">
                                    <img src="/placeholder.svg?height=40&width=40" alt="Robert" className="w-10 h-10 rounded-full" />
                                    <div className="flex-1">
                                        <p className="text-slate-800">Hi! My name is Robert. What is your name?</p>
                                    </div>
                                    <div className="flex space-x-2">
                                        <Button size="sm" className="text-white border-0 hover:opacity-90 cursor-pointer bg-lime-500">
                                            <Volume2 className="h-4 w-4" />
                                        </Button>
                                        <Button size="sm" variant="outline" className="border-slate-200 text-slate-700 hover:bg-lime-50 cursor-pointer">
                                            üîÑ
                                        </Button>
                                    </div>
                                </div>
                            </div>
                        )}
                    </div>

                    <div className="border-t p-6 bg-white border-slate-200">
                        <div className="flex items-center space-x-4">
                            <Button
                                size="sm"
                                variant="outline"
                                className="border-slate-200 text-slate-700 hover:bg-lime-50 bg-transparent cursor-pointer"
                            >
                                üí¨
                            </Button>

                            <Button
                                className={`w-16 h-16 rounded-full cursor-pointer ${isRecording ? "animate-pulse" : ""} ${isRecording ? 'bg-red-500' : 'bg-lime-500'}`}
                                onClick={handleVoiceInput}
                            >
                                {isRecording ? <MicOff className="h-6 w-6" /> : <Mic className="h-6 w-6" />}
                            </Button>

                            <Button
                                size="sm"
                                variant="outline"
                                className="border-slate-200 text-slate-700 hover:bg-lime-50 bg-transparent cursor-pointer"
                            >
                                üí°
                            </Button>
                        </div>

                        <div className="text-center mt-4">
                            <p className="text-slate-600">{isRecording ? "ƒêang nghe..." : "Nh·∫•n Enter"}</p>
                        </div>

                        {currentMessage && (
                            <div className="mt-4 p-3 rounded-lg bg-white border border-slate-200">
                                <p className="text-slate-800">{currentMessage}</p>
                                <div className="flex justify-end mt-2">
                                    <Button size="sm" onClick={sendMessage} className="text-white border-0 hover:opacity-90 cursor-pointer bg-lime-500">
                                        <Send className="h-4 w-4 mr-1" />
                                        G·ª≠i
                                    </Button>
                                </div>
                            </div>
                        )}
                    </div>
                </div>

                <div className="w-80 border-l p-6 bg-white border-slate-200">
                    <h3 className="text-lg font-semibold mb-4 text-slate-800">Nhi·ªám v·ª•</h3>
                    <div className="space-y-3">
                        <div className="flex items-center space-x-3 p-3 rounded-lg bg-gray-50">
                            <div className="w-6 h-6 rounded-full flex items-center justify-center bg-slate-400">
                                <span className="text-white text-sm">‚úì</span>
                            </div>
                            <span className="text-slate-700">H√£y chia s·∫ª t√™n c·ªßa b·∫°n.</span>
                        </div>
                        <div className="flex items-center space-x-3 p-3 rounded-lg bg-gray-50">
                            <div className="w-6 h-6 rounded-full flex items-center justify-center bg-slate-400">
                                <span className="text-white text-sm">‚úì</span>
                            </div>
                            <span className="text-slate-700">Cho ng∆∞·ªùi b·∫°n m·ªõi bi·∫øt b·∫°n ƒë·∫øn t·ª´ ƒë√¢u.</span>
                        </div>
                        <div className="flex items-center space-x-3 p-3 rounded-lg bg-gray-50">
                            <div className="w-6 h-6 rounded-full flex items-center justify-center bg-slate-400">
                                <span className="text-white text-sm">‚úì</span>
                            </div>
                            <span className="text-slate-700">Chia s·∫ª ngh·ªÅ nghi·ªáp c·ªßa b·∫°n.</span>
                        </div>
                    </div>

                    <div className="mt-8">
                        <h4 className="font-semibold mb-3 text-slate-800">G·ª£i √Ω</h4>
                        <div className="space-y-2 text-sm text-slate-600">
                            <p>‚Ä¢ N√≥i ch·∫≠m v√† r√µ r√†ng</p>
                            <p>‚Ä¢ S·ª≠ d·ª•ng c√¢u ƒë∆°n gi·∫£n</p>
                            <p>‚Ä¢ ƒê·ª´ng ng·∫°i l·∫∑p l·∫°i</p>
                            <p>‚Ä¢ T·ª± tin v√† t·ª± nhi√™n</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}
